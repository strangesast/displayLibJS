// Generated by CoffeeScript 1.9.3
(function() {
  var Base, CMD_NONE, Color, DisplayAttribute, DisplayCmd, DisplayRequest, GenericScope, MSG_DISPLAY_CMD, MSG_GENERIC_CMD, MSG_NONE, MSG_PANELDEF, MSG_RECT, MSG_TEXT, MSG_TEXTBOX, MSG_TEXTBOX_CMD, MSG_TIMER_CMD, MessageCommand, ObjectCategory, Panel, PanelGeometry, PanelLayout, PanelPosition, ProtocolCode, SVGNS, S_PARTICULAR_CONTROL, ScrollCommand, ScrollEffect, ScrollOrientation, Template, Text, TextAction, TextFlag, Textbox, UpdateType, XYInfo, exports,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  SVGNS = "http://www.w3.org/2000/svg";

  CMD_NONE = 0;

  MSG_NONE = 0;

  MSG_RECT = 101;

  MSG_TEXTBOX = 110;

  MSG_TEXT = 150;

  MSG_PANELDEF = 151;

  MSG_TEXTBOX_CMD = 161;

  MSG_GENERIC_CMD = 160;

  MSG_TIMER_CMD = 162;

  MSG_DISPLAY_CMD = 163;

  S_PARTICULAR_CONTROL = 1;

  ObjectCategory = Object.freeze({
    OC_UNSPECIFIED: 0,
    OC_CONTROL: 1,
    OC_SHAPE: 2,
    OC_DATA: 3,
    OC_COMMAND: 4
  });

  ProtocolCode = Object.freeze({
    MSG_END: 0x01,
    MSG_START: 0x02,
    START_ARRAY: 0x03,
    END_ARRAY: 0x04,
    START_TEXT: 0x05,
    END_ELEMENT: 0x06,
    START_NUMBER_POS: 0x07,
    START_NUMBER_NEG: 0x08,
    FIRST_LEGAL_CHAR: 0x09,
    MAGIC_NUMBER: 0x87
  });

  DisplayAttribute = Object.freeze({
    DA_NONE: 0,
    DA_NORMAL: 1,
    DA_HIDDEN: 2,
    DA_FLASHING: 3,
    DA_TBD_1: 10
  });

  GenericScope = Object.freeze({
    GS_NONE: -1,
    GS_APPLIES_TO_ALL: -2
  });

  ScrollCommand = Object.freeze({
    SCROLL_NONE: -1,
    SCROLL_AUTO_BY_LINE: 0,
    SCROLL_AUTO_BY_PAGE: 1,
    SCROLL_MANUAL: 2,
    SCROLL_PAUSE: 10,
    SCROLL_RESUME: 11,
    SCROLL_UP: 12,
    SCROLL_DOWN: 13,
    SCROLL_TO_TOP: 14,
    SCROLL_TO_BOTTOM: 15,
    SCROLL_TO_POSITION: 16
  });

  ScrollOrientation = Object.freeze({
    SO_NONE: -1,
    SO_NOSCROLL: 1,
    SO_SCROLL_H: 2,
    SO_SCROLL_V: 3
  });

  ScrollEffect = Object.freeze({
    SE_NONE: -1,
    SE_NORMAL: 0,
    SE_SPORTSYNC: 1
  });

  ({
    SE_DIVIDER_BETWEEN_POSTS: 2
  });

  MessageCommand = Object.freeze({
    MESSAGE_NONE: -1,
    MESSAGE_SELECT: 0,
    MESSAGE_CYCLE_OFF: 1,
    MESSAGE_CYCLE_ON: 2,
    MESSAGE_CYCLE_PAUSE: 3,
    MESSAGE_CYCLE_RESUME: 4,
    MESSAGE_NEXT: 5,
    MESSAGE_PREV: 6,
    MESSAGE_FIRST: 7,
    MESSAGE_LAST: 8,
    MESSAGE_CREATE: 10,
    MESSAGE_DELETE: 11,
    MESSAGE_CYCLE_RATE: 20,
    MESSAGE_POSTS_MAX: 21
  });

  TextAction = Object.freeze({
    TEXT_NOACTION: 0,
    TEXT_APPEND: 1,
    TEXT_REPLACE: 2,
    TEXT_CLEAR: 3
  });

  TextFlag = Object.freeze({
    TF_NONE: 0,
    TF_LINEBREAK: 1,
    TF_MSGEND: 2
  });

  PanelGeometry = Object.freeze({
    PG_NOT_SPECIFIED: 0,
    PG_SINGLE: 1,
    PG_SIDEBYSIDE: 2,
    PG_FOURSQUARE: 3
  });

  PanelPosition = Object.freeze({
    PP_NOT_SPECIFIED: 0,
    PP_L: 1,
    PP_R: 2,
    PP_TL: 1,
    PP_TR: 2,
    PP_BL: 3,
    PP_BR: 4
  });

  PanelLayout = Object.freeze({
    PL_NORMAL: 0,
    PL_REVERSED: 1
  });

  DisplayRequest = Object.freeze({
    DISPLAY_NO_REQUEST: 0,
    DISPLAY_CLEAR: 1
  });

  UpdateType = Object.freeze({
    UPDATE_NONE: 0,
    UPDATE_SPECIFIED_ITEMS: 1,
    UPDATE_ALL: 2
  });

  Color = (function() {
    function Color(red, green, blue, intensity) {
      this.value = this.allToHex(red, green, blue, intensity);
    }

    Color.prototype.eachToHex = function(e) {
      var hex;
      hex = e.toString(16);
      if (hex.length === 1) {
        return "0" + hex;
      } else {
        return hex;
      }
    };

    Color.prototype.allToHex = function(r, g, b, i) {
      return "" + (this.eachToHex(i)) + (this.eachToHex(r)) + (this.eachToHex(g)) + (this.eachToHex(b));
    };

    return Color;

  })();

  Base = (function() {
    function Base(xy) {
      this.xy = xy;
    }

    Base.prototype.string_type = 'Base';

    Base.prototype.encodeint = function(value, encoded_buffer, pos) {
      if (value < 0) {
        value = -value;
        encoded_buffer[pos] = ProtocolCode.START_NUMBER_NEG;
      } else {
        encoded_buffer[pos] = ProtocolCode.START_NUMBER_POS;
      }
      pos++;
      while (value > 0) {
        encoded_buffer[pos] = 0x30 + (value & 0x0f);
        pos++;
        value = value >> 4;
      }
      encoded_buffer[pos] = ProtocolCode.END_ELEMENT;
      pos++;
      return pos;
    };

    Base.prototype.encodestring = function(string_value, encoded_buffer, pos) {
      var char, i, k, len;
      if (typeof string_value !== 'string') {
        throw new Error(string_value + " is not a string");
      }
      encoded_buffer[pos] = ProtocolCode.START_TEXT;
      pos++;
      for (i = k = 0, len = string_value.length; k < len; i = ++k) {
        char = string_value[i];
        if (string_value.charCodeAt(i < ProtocolCode.FIRST_LEGAL_CHAR)) {
          continue;
        }
        encoded_buffer[pos] = string_value.charCodeAt(i);
        pos++;
      }
      encoded_buffer[pos] = ProtocolCode.END_ELEMENT;
      return pos++;
    };

    Base.prototype.decodeint = function(encoded_buffer, pos) {
      var is_negative;
      is_negative = false;
      if (encoded_buffer[pos] === ProtocolCode.START_NUMBER_POS) {

      } else if (encoded_buffer[pos] === ProtocolCode.START_NUMBER_NEG) {
        return is_negative = true;
      } else {
        return {
          result_int: 0,
          result_pos: 0
        };
      }
    };

    Base.prototype.decodestring = function(encoded_buffer, pos) {
      var return_string;
      if (encoded_buffer[pos] !== ProtocolCode.START_TEXT) {
        return 0;
      }
      while (true) {
        if (encoded_buffer[pos] === ProtocolCode.END_ELEMENT) {
          pos++;
          break;
        } else if (encoded_buffer[pos] < ProtocolCode.FIRST_LEGAL_CHAR) {
          break;
        }
        return_string = return_string + encoded_buffer[pos];
      }
      return {
        result_str: return_string,
        result_pos: pos
      };
    };

    Base.prototype.buildmessagecontents = function(msg_buffer, pos) {
      return pos;
    };

    Base.prototype.buildmessage = function() {
      var msg_buffer, pos, scope;
      msg_buffer = new Buffer(2000);
      pos = 0;
      msg_buffer[pos] = ProtocolCode.MSG_START;
      pos++;
      msg_buffer[pos] = ProtocolCode.MAGIC_NUMBER;
      pos++;
      pos = this.encodeint(this.type, msg_buffer, pos);
      scope = this;
      pos = [this.layer, this.panel, this.control, this.parent_control, this.is_final, this.display_attribute].reduce(function(prev, curr, i) {
        return scope.encodeint.call(scope, curr, msg_buffer, prev);
      }, pos);
      pos = this.buildmessagecontents(msg_buffer, pos);
      msg_buffer[pos] = ProtocolCode.MSG_END;
      pos++;
      return {
        result_buffer: msg_buffer,
        result_bytes: pos
      };
    };

    Base.prototype.newSVGElement = function(kind, attributes) {
      var attr, elem;
      elem = document.createElementNS(SVGNS, kind);
      for (attr in attributes) {
        elem.setAttribute(attr, attributes[attr]);
      }
      return elem;
    };

    Base.prototype.set_hidden = function(bool) {
      var ref, visibility;
      visibility = bool ? 'hidden' : 'visible';
      return (ref = this.repr) != null ? ref.setAttribute('visibility', visibility) : void 0;
    };

    Base.prototype.render_self = function(visibility) {
      var b_attributes, r_attributes, repr;
      r_attributes = {
        name: "" + this.string_type,
        transform: "translate(" + this.xy.x + ", " + this.xy.y + ")",
        visibility: visibility
      };
      if (this.name != null) {
        r_attributes['id'] = this.string_type + "_" + (this.name.replace(' ', '_'));
      }
      repr = this.newSVGElement('g', r_attributes);
      b_attributes = {
        name: 'bounds',
        width: this.xy.x_size,
        height: this.xy.y_size,
        visibility: 'inherit',
        draggable: true
      };
      if (this.render_color != null) {
        b_attributes.fill = this.render_color;
      }
      this.bounds = this.newSVGElement('rect', b_attributes);
      repr.appendChild(this.bounds);
      return repr;
    };

    Base.prototype.render = function(visibility) {
      if (visibility == null) {
        visibility = 'visible';
      }
      this.repr = this.render_self(visibility);
      return this.repr;
    };

    Base.prototype.serialize = function(obj) {
      var each, k, len, prop, ref, ret, temp, val;
      if (obj == null) {
        obj = this;
      }
      ret = {};
      for (prop in obj) {
        val = obj[prop];
        if (val instanceof Array) {
          temp = [];
          for (k = 0, len = val.length; k < len; k++) {
            each = val[k];
            temp.push(this.serialize(each));
          }
          ret[prop] = temp;
        } else if (val instanceof Object && (val.serialize != null)) {
          ret[prop] = val.serialize();
        } else if ((ref = typeof val) === "number" || ref === "string" || ref === "boolean" || ref === "null") {
          ret[prop] = val;
        }
      }
      return ret;
    };

    Base.deserialize = function(obj) {
      var each, k, len, object, prop, temp, val;
      if ((obj != null ? obj.string_type : void 0) == null) {
        throw new Error('not a valid object');
      }
      if (exports[obj.string_type] == null) {
        throw new Error('not in exports');
      }
      object = new exports[obj.string_type];
      for (prop in obj) {
        val = obj[prop];
        if (val instanceof Array) {
          temp = [];
          for (k = 0, len = val.length; k < len; k++) {
            each = val[k];
            temp.push(this.deserialize(each));
          }
          object[prop] = temp;
        } else if (val.string_type != null) {
          object[prop] = this.deserialize(val);
        } else {
          object[prop] = val;
        }
      }
      return object;
    };

    return Base;

  })();

  XYInfo = (function(superClass) {
    extend(XYInfo, superClass);

    function XYInfo(x, y, x_size, y_size) {
      this.x = x != null ? x : 0;
      this.y = y != null ? y : 0;
      this.x_size = x_size != null ? x_size : 0;
      this.y_size = y_size != null ? y_size : 0;
    }

    XYInfo.prototype.string_type = 'XYInfo';

    XYInfo.prototype.clear = function() {
      this.x = 0;
      this.y = 0;
      this.x_size = 0;
      return this.y_size = 0;
    };

    return XYInfo;

  })(Base);

  Template = (function(superClass) {
    extend(Template, superClass);

    function Template(name, panels, elements, pixels, render_delay) {
      this.name = name;
      this.panels = panels != null ? panels : [];
      this.elements = elements != null ? elements : [];
      this.pixels = pixels != null ? pixels : 10;
      this.render_delay = render_delay != null ? render_delay : 100;
      this.set_moving = bind(this.set_moving, this);
      this.extents = this.recalculateExtents();
    }

    Template.prototype.string_type = 'Template';

    Template.prototype.set_hidden = function(bool, what) {
      var each, element, k, l, len, len1, len2, m, panel, ref, ref1, ref2;
      if (what == null) {
        what = "all";
      }
      switch (what) {
        case "panels":
          ref = this.panels;
          for (k = 0, len = ref.length; k < len; k++) {
            panel = ref[k];
            panel.set_hidden(bool);
          }
          break;
        case "elements":
          ref1 = this.elements;
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            element = ref1[l];
            element.set_hidden(bool);
          }
          break;
        case "all":
          ref2 = this.panels.concat(this.elements);
          for (m = 0, len2 = ref2.length; m < len2; m++) {
            each = ref2[m];
            each.set_hidden(bool);
          }
      }
      return null;
    };

    Template.prototype.recalculateExtents = function() {
      var ext, k, l, len, len1, panel, pos, ref, ref1;
      ext = {};
      ref = this.panels;
      for (k = 0, len = ref.length; k < len; k++) {
        panel = ref[k];
        if (ext.x_low == null) {
          ext.x_low = panel.xy.x;
        }
        if (ext.y_low == null) {
          ext.y_low = panel.xy.y;
        }
        if (ext.x_high == null) {
          ext.x_high = panel.xy.x + panel.xy.x_size;
        }
        if (ext.y_high == null) {
          ext.y_high = panel.xy.y + panel.xy.y_size;
        }
        ext.x_low = Math.min(ext.x_low, panel.xy.x);
        ext.y_low = Math.min(ext.y_low, panel.xy.y);
        ext.x_high = Math.max(ext.x_high, panel.xy.x + panel.xy.x_size);
        ext.y_high = Math.max(ext.y_high, panel.xy.y + panel.xy.y_size);
      }
      ref1 = this.panels;
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        panel = ref1[l];
        pos = new XYInfo(ext.x_low, ext.y_low, ext.x_high - ext.x_low, ext.y_high - ext.y_low);
        panel.total_size = pos;
      }
      this.extents = ext;
      return this.extents;
    };

    Template.prototype.render_self = function() {
      var extents, repr, viewbox_str;
      extents = this.extents;
      if (Object.keys(extents).every(function(elem) {
        return extents[elem] === 0;
      })) {
        extents = {
          x_low: 0,
          y_low: 0,
          x_high: 50,
          y_high: 50
        };
      }
      viewbox_str = [extents.x_low, extents.y_low, extents.x_high - extents.x_low, extents.y_high - extents.y_low].join(" ");
      repr = this.newSVGElement('svg', {
        id: this.string_type + "_" + (this.name.replace(' ', '_')),
        name: "" + this.string_type,
        viewBox: viewbox_str,
        width: (extents.x_high - extents.x_low) * this.pixels,
        height: (extents.y_high - extents.y_low) * this.pixels
      });
      return repr;
    };

    Template.prototype.render = function() {
      var attachMoverListener, element, element_repr, k, l, len, len1, move, panel, panel_repr, ref, ref1, ref2, repr, scope;
      this.currently_moving = null;
      this.extents = this.recalculateExtents();
      repr = this.render_self();
      scope = this;
      move = (function(_this) {
        return function(e) {
          var elem, elem_repr, end, offsetx, offsety, start;
          if (_this.currently_moving != null) {
            start = _this.currently_moving.start_position;
            end = {
              x: e.clientX,
              y: e.clientY
            };
            offsetx = (end.x - start.x) / _this.pixels;
            offsety = (end.y - start.y) / _this.pixels;
            elem = _this.currently_moving.element;
            elem_repr = elem.repr;
            elem_repr.setAttribute('transform', "translate(" + (elem.xy.x + offsetx) + ", " + (elem.xy.y + offsety) + ")");
            if (e.type !== "mousemove") {
              _this.currently_moving = null;
              elem.xy.x += Math.round(offsetx);
              elem.xy.y += Math.round(offsety);
              elem_repr.setAttribute('transform', "translate(" + elem.xy.x + ", " + elem.xy.y + ")");
              setTimeout(function() {
                return scope.render.call(scope);
              }, scope.render_delay);
            }
          }
          return null;
        };
      })(this);
      repr.addEventListener('mousemove', move);
      repr.addEventListener('mouseup', move);
      repr.addEventListener('mouseout', move);
      attachMoverListener = function(elem) {
        var movestart;
        movestart = function(e) {
          return scope.set_moving(elem, e);
        };
        return elem.bounds.addEventListener('mousedown', movestart);
      };
      ref = this.panels;
      for (k = 0, len = ref.length; k < len; k++) {
        panel = ref[k];
        panel_repr = panel.render();
        repr.appendChild(panel_repr);
        if ((panel.move_unlocked != null) === true) {
          attachMoverListener(panel);
        }
      }
      ref1 = this.elements;
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        element = ref1[l];
        element_repr = element.render();
        repr.appendChild(element_repr);
        if ((element.bounds != null) && (element.move_unlocked != null) === true) {
          attachMoverListener(element);
        }
      }
      if (this.repr) {
        if ((ref2 = this.repr.parentNode) != null) {
          ref2.replaceChild(repr, this.repr);
        }
      }
      this.repr = repr;
      return this.repr;
    };

    Template.prototype.set_moving = function(elem, e) {
      return this.currently_moving = {
        element: elem,
        start_position: {
          x: e.clientX,
          y: e.clientY
        }
      };
    };

    Template.prototype.buildmessage = function() {
      var child, element, i, is_final, j, k, l, len, len1, len2, m, message, panel, ref, ref1, ref2, ref3, temp;
      temp = [];
      ref = this.panels;
      for (i = k = 0, len = ref.length; k < len; i = ++k) {
        panel = ref[i];
        message = panel.buildmessage();
        temp.push(message);
      }
      ref1 = this.elements;
      for (i = l = 0, len1 = ref1.length; l < len1; i = ++l) {
        element = ref1[i];
        is_final = i + 1 === this.elements.length ? 1 : 0;
        if (((ref2 = element.elements) != null ? ref2.length : void 0) > 0) {
          message = element.buildmessage();
          temp.push(message);
          ref3 = element.elements;
          for (j = m = 0, len2 = ref3.length; m < len2; j = ++m) {
            child = ref3[j];
            is_final = j + 1 === element.elements.length ? is_final : 0;
            child.is_final = is_final;
            temp.push(child.buildmessage());
          }
        } else {
          element.is_final;
          message = element.buildmessage();
          temp.push(message);
        }
      }
      return temp;
    };

    return Template;

  })(Base);

  Panel = (function(superClass) {
    extend(Panel, superClass);

    function Panel(name, xy, move_unlocked, total_size, fg_color, bg_color, geometry, position, layout, category, layer, panel1, control, parent_control, is_final1, display_attribute) {
      this.name = name;
      this.xy = xy;
      this.move_unlocked = move_unlocked != null ? move_unlocked : true;
      this.total_size = total_size != null ? total_size : new XYInfo();
      this.fg_color = fg_color != null ? fg_color : new Color(200, 200, 200, 200);
      this.bg_color = bg_color != null ? bg_color : new Color(80, 80, 80, 80);
      this.geometry = geometry != null ? geometry : PanelGeometry.PG_NOT_SPECIFIED;
      this.position = position != null ? position : PanelPosition.PP_NOT_SPECIFIED;
      this.layout = layout != null ? layout : PanelLayout.PL_NORMAL;
      this.category = category != null ? category : ObjectCategory.OC_UNSPECIFIED;
      this.layer = layer != null ? layer : 0;
      this.panel = panel1 != null ? panel1 : 0;
      this.control = control != null ? control : 0;
      this.parent_control = parent_control != null ? parent_control : 0;
      this.is_final = is_final1 != null ? is_final1 : 0;
      this.display_attribute = display_attribute != null ? display_attribute : DisplayAttribute.DA_NONE;
    }

    Panel.prototype.type = MSG_PANELDEF;

    Panel.prototype.string_type = 'Panel';

    Panel.prototype.render_color = 'rgba(120, 120, 120, 1.0)';

    Panel.prototype.buildmessagecontents = function(msg_buffer, pos) {
      var scope;
      scope = this;
      pos = [this.fg_color.value, this.bg_color.value, this.geometry, this.position, this.layout, this.xy.x, this.xy.y, this.xy.x_size, this.xy.y_size, this.total_size.x, this.total_size.y, this.total_size.x_size, this.total_size.y_size].reduce(function(prev, curr, i) {
        return scope.encodeint.call(scope, curr, msg_buffer, prev);
      }, pos);
      return pos;
    };

    return Panel;

  })(Base);

  Textbox = (function(superClass) {
    extend(Textbox, superClass);

    function Textbox(xy, text, move_unlocked, control, text_xy, fg_color, bg_color, border_color, border_width, scroll_type, preferred_font) {
      var t;
      this.xy = xy;
      this.move_unlocked = move_unlocked != null ? move_unlocked : true;
      this.control = control != null ? control : Math.floor(Math.random() * 100);
      this.text_xy = text_xy != null ? text_xy : new XYInfo();
      this.fg_color = fg_color != null ? fg_color : new Color(200, 200, 200, 200);
      this.bg_color = bg_color != null ? bg_color : new Color(120, 120, 120, 200);
      this.border_color = border_color != null ? border_color : new Color(120, 120, 120, 120);
      this.border_width = border_width != null ? border_width : 1;
      this.scroll_type = scroll_type != null ? scroll_type : 3;
      this.preferred_font = preferred_font != null ? preferred_font : "";
      this.elements = [];
      if (text) {
        t = new Text(this.text_xy, text, this.control);
        this.elements.push(new Text(this.text_xy, text));
      }
    }

    Textbox.prototype.string_type = 'Textbox';

    Textbox.prototype.buildmessagecontents = function(msg_buffer, pos) {
      var scope;
      scope = this;
      pos = [this.xy.x, this.xy.y, this.xy.x_size, this.xy.y_size, this.fg_color, this.bg_color, this.border_color, this.border_width, this.text_xy.x, this.text_xy.y, this.text_xy.x_size, this.text_xy.y_size, this.char_buffer_size].reduce(function(prev, curr, i) {
        return scope.encodeint.call(scope, curr, msg_buffer, prev);
      }, pos);
      pos = scope.encodestring.call(scope, this.preferred_font, msg_buffer, pos);
      return pos;
    };

    Textbox.prototype.render_color = 'rgba(140, 140, 140, 1.0)';

    Textbox.prototype.render = function(visibility) {
      var element, element_repr, k, len, ref, repr;
      if (visibility == null) {
        visibility = 'visible';
      }
      repr = Textbox.__super__.render.call(this, visibility);
      ref = this.elements;
      for (k = 0, len = ref.length; k < len; k++) {
        element = ref[k];
        element_repr = element.render('inherit');
        repr.appendChild(element_repr);
      }
      this.repr = repr;
      return this.repr;
    };

    return Textbox;

  })(Base);

  Text = (function(superClass) {
    extend(Text, superClass);

    function Text(xy, text1, parent_control, font_size, font_family, preferred_font, fg_color, bg_color) {
      this.xy = xy;
      this.text = text1 != null ? text1 : 'undefined';
      this.parent_control = parent_control;
      this.font_size = font_size != null ? font_size : "6px";
      this.font_family = font_family != null ? font_family : "Sans Serif";
      this.preferred_font = preferred_font != null ? preferred_font : "";
      this.fg_color = fg_color != null ? fg_color : new Color(255, 234, 8, 200);
      this.bg_color = bg_color != null ? bg_color : new Color(205, 184, 8, 150);
    }

    Text.prototype.string_type = 'Text';

    Text.prototype.buildmessagecontents = function(msg_buffer, pos) {
      var scope;
      scope = this;
      pos = [this.fg_color.value, this.bg_color.value, this.position, this.message, this.text_action, this.text_flag, this.text_spacing].reduce(function(prev, curr, i) {
        return scope.encodeint.call(scope, curr, msg_buffer, prev);
      }, pos);
      [this.preferred_font, this.text].reduce(function(prev, curr, i) {
        return scope.encodestring.call(scope, curr, msg_buffer, prev);
      }, pos);
      return pos;
    };

    Text.prototype.render_color = 'rgba(160, 160, 160, 1.0)';

    Text.prototype.text_render_color = 'rgba(200, 200, 200, 1.0)';

    Text.prototype.render_self = function(visibility) {
      var repr, text;
      repr = Text.__super__.render_self.call(this, visibility);
      text = this.newSVGElement('text', {
        x: 0,
        y: 6,
        fill: this.text_render_color,
        'font-family': this.font_family,
        'font-size': this.font_size,
        visibility: 'inherit'
      });
      text.appendChild(document.createTextNode(this.text));
      repr.appendChild(text);
      return repr;
    };

    Text.prototype.render = function(visibility) {
      if (visibility == null) {
        visibility = 'inherit';
      }
      this.repr = Text.__super__.render.call(this, visibility);
      return this.repr;
    };

    return Text;

  })(Base);

  DisplayCmd = (function(superClass) {
    extend(DisplayCmd, superClass);

    function DisplayCmd(type, display_request, update_type, bright_level, bright_range) {
      if (type == null) {
        type = MSG_DISPLAY_CMD;
      }
      if (display_request == null) {
        display_request = DisplayRequest.DISPLAY_NO_REQUEST;
      }
      if (update_type == null) {
        update_type = UpdateType.UPDATE_NONE;
      }
      if (bright_level == null) {
        bright_level = -1;
      }
      if (bright_range == null) {
        bright_range = -1;
      }
    }

    DisplayCmd.prototype.string_type = 'DisplayCmd';

    DisplayCmd.prototype.buildmessagecontents = function(msg_buffer, pos) {
      var scope;
      scope = this;
      pos = [this.display_request, this.update_type, this.bright_level, this.bright_range].reduce(function(prev, curr, i) {
        return scope.encodeint.call(scope, curr, msg_buffer, prev);
      }, pos);
      return pos;
    };

    return DisplayCmd;

  })(Base);

  exports = {
    'Color': Color,
    'Base': Base,
    'XYInfo': XYInfo,
    'Template': Template,
    'Panel': Panel,
    'Textbox': Textbox,
    'Text': Text,
    'DisplayCmd': DisplayCmd,
    'ObjectCategory': ObjectCategory,
    'ProtocolCode': ProtocolCode,
    'DisplayAttribute': DisplayAttribute,
    'GenericScope': GenericScope,
    'ScrollCommand': ScrollCommand,
    'ScrollOrientation': ScrollOrientation,
    'ScrollEffect': ScrollEffect,
    'MessageCommand': MessageCommand,
    'TextAction': TextAction,
    'TextFlag': TextFlag,
    'PanelGeometry': PanelGeometry,
    'PanelPosition': PanelPosition,
    'PanelLayout': PanelLayout,
    'DisplayRequest': DisplayRequest,
    'UpdateType': UpdateType,
    'CMD_NONE': CMD_NONE,
    'MSG_NONE': MSG_NONE,
    'MSG_RECT': MSG_RECT,
    'MSG_TEXTBOX': MSG_TEXTBOX,
    'MSG_TEXT': MSG_TEXT,
    'MSG_PANELDEF': MSG_PANELDEF,
    'MSG_TEXTBOX_CMD': MSG_TEXTBOX_CMD,
    'MSG_GENERIC_CMD': MSG_GENERIC_CMD,
    'MSG_TIMER_CMD': MSG_TIMER_CMD,
    'MSG_DISPLAY_CMD': MSG_DISPLAY_CMD,
    'S_PARTICULAR_CONTROL': S_PARTICULAR_CONTROL
  };

  if (typeof module !== "undefined" && module !== null) {
    module.exports = exports;
  } else {
    window.displayLib = exports;
  }

}).call(this);
